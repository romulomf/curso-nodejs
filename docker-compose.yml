version: '3.9'
networks:
  curso-nodejs-network:
    name: curso-nodejs
    driver: bridge
services:
  database:
    image: mariadb:focal
    container_name: curso-nodejs-petshop-database
    hostname: petshop-database
    networks:
      curso-nodejs-network:
    environment:
      - MARIADB_ROOT_PASSWORD=${DB_ROOT}
      - MARIADB_DATABASE=${DB_NAME}
      - MARIADB_USER=${DB_USER}
      - MARIADB_PASSWORD=${DB_PASS}
    healthcheck:
      test: ["CMD", "mariadb", "--database=${DB_NAME}", "--user=${DB_USER}", "--password=${DB_PASS}", "--port=${DB_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    ports:
      - 3306:3306
    restart: "no"
    # TODO fazer um script que verifica se o status de inicialização do banco de dados antes de subir a aplicação https://docs.docker.com/compose/startup-order/.
  webserver:
    user: node
    image: node:lts
    container_name: curso-nodejs-petshop-webserver
    hostname: petshop-webserver
    networks:
      curso-nodejs-network:
    environment:
      - NODE_ENV=${ENVIRONMENT}
    #
    # O comando de inicialização aqui deve ser o mesmo que é usado no nodemon, mas não invocar o nodemon explicitamente, pois a saída correta, isto é, o encerramento
    # normal do container e finalização do servidor express, só irá funcionar com o container iniciando com o comando do node e não do nodemon.
    #
    command: "node --inspect=0.0.0.0:9229 -r ts-node/register src/index.ts"
    working_dir: /home/petshop/app
    volumes:
      - ./:/home/petshop/app
    ports:
      - 3000:3000
      # Porta 9229 é a porta de depuração do node
      - 9229:9229
    depends_on: 
      - database
    restart: "no"